// Approach: 

//       Create two pointers slow and fast and initialize them to a head pointer.
//       Move slow ptr by one step and simultaneously fast ptr by two steps until
//       fast ptr is NULL or next of fast ptr is NULL.
//       When the above condition is met, we can see that the slow ptr is pointing
//       towards the middle of Linked List and hence we can return the slow pointer.



#include <bits/stdc++.h>

using namespace std;

struct node{
     int data;
     struct node*next;
};

int midLL(node * head ){
    node * slow = head;
    node * fast = head;
    
    // Move slow ptr by one step and simultaneously fast ptr by two steps until
//       fast ptr is NULL or next of fast ptr is NULL.

    while(fast && fast->next){
        fast=fast->next->next;
        slow = slow->next;
        
    }
    
    // WHEN FAST REACHES TO THE END SLOW REACHES TO THE MIDDLE SO RETURN SLOW
    
    return slow->data;
    
    
}


int main()
{
    node n1 = {10 ,NULL};
    node n2 = {20 ,NULL};
    node n3 = {30 ,NULL};
    node n4 = {40 ,NULL};
    node n5 = {50 ,NULL};
    node n6 = {60 ,NULL};
    node n7 = {70 ,NULL};
    
    n1.next = &n2;
    n2.next = &n3;
    n3.next = &n4;
    n4.next = &n5;
    n5.next = &n6;
    n6.next = &n7;
    
    node* head = &n1;
    
    cout<<midLL(head);
    
    

    return 0;
}
